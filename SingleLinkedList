package com.trinadh.LinkedList;

public class LL {

    private Node head;
    private Node tail;
    private int size;

    public LL() {
        this.size = 0;
    }
    public void insertFirst(int val){
        Node node = new Node(val); //box is created
        node.next = head;
        head = node;

        if(tail == null){
            tail = head;
        }

        size +=1;
    }

    public void insertLast(int val){

        if(tail == null){ //if node is empty how is it possible to insert last. so, called insertFirst and then return.
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
            tail.next = node;
            tail = node;
            size++;
    }

    public void insert(int val, int index){
        if(index == 0){
           insertFirst(val);
           return;
        }
        if(index == size){
            insertLast(val);
            return;
        }


        Node temp = head;
        for(int i = 1; i < index; i++){
            temp = temp.next;
        }

        Node node = new Node(val,temp.next); //creating box with value and next reference(i.e temp.next);
        temp.next = node;
        size++;


    }

    public int deleteFirst(){
        int val = head.value;
        head = head.next;
        if(head == null){
            tail = null;
        }
        size--;
        return val;
    }

    public Node get(int index){ //for deleting last tail we dont have node.preivous in single linked list
        //so now we need to take temp and that will kept on last but one index. so, that we need to
        //get the reference by using this function get();
        Node node = head;
        for(int i = 0; i < index; i++){
            node = node.next;
        }
        return node;
    }

    public int deleteLast(){
        if(size <= 1){
            return deleteFirst();
        }
        Node secondLast = get(size - 2);
        int val = tail.value;
        tail = secondLast;
        tail.next = null;
        return val;
    }

    public int delete(int index){
        if(index == 0){
            return deleteFirst();
        }
        if(index == size - 1){
            return deleteLast();
        }
        Node prev = get(index - 1);
        int val = prev.next.value;
        prev.next = prev.next.next;
        return val;
    }
    public Node find(int value){//traversing the node..
        Node node = head;
        while(node != null){
            if(node.value == value){
                return node;
            }

            node = node.next;
        }
        return null;
    }

    public void display(){
        Node temp = head;

        while(temp != null){
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("END");

    }

    private class Node{
        private int value;
        private Node next;


        public Node(int val) {
            this.value = val;
        }

        public Node(int val, Node next) {
            this.value = val;
            this.next = next;
        }
    }
}
//============================================================================================
package com.trinadh.LinkedList;

public class Main {
    public static void main(String[] args) {
        LL linkedList = new LL();

        linkedList.insertFirst(1);
        linkedList.insertFirst(5);
        linkedList.insertFirst(4);
        linkedList.insertFirst(7);
        linkedList.insertFirst(15);
        linkedList.insertLast(9);
        linkedList.insert(3,1);
        linkedList.display();
        System.out.println(linkedList.deleteFirst());
        linkedList.display();
        System.out.println(linkedList.deleteLast());
        linkedList.display();
        System.out.println(linkedList.delete(1));
        linkedList.display();
    }
}
