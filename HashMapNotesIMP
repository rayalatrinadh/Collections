
                                                        Important Features of HashMap

To access a value one must know its key. HashMap is known as HashMap because it uses a technique called Hashing.
Hashing is a technique of converting a large String to small String that represents the same String.
A shorter value helps in indexing and faster searches. HashSet also uses HashMap internally.
Few important features of HashMap are:

HashMap is a part of java.util package.
HashMap extends an abstract class AbstractMap which also provides an incomplete implementation of Map interface.
It also implements Cloneable and Serializable interface. K and V in the above definition represent Key and Value respectively.
HashMap doesn’t allow duplicate keys but allows duplicate values.
That means A single key can’t contain more than 1 value but more than 1 key can contain a single value.
HashMap allows null key also but only once and multiple null values.
This class makes no guarantees as to the order of the map; in particular,
it does not guarantee that the order will remain constant over time. It is roughly similar to HashTable but is unsynchronized.

========================================================================================================================================
        NOTE 01 : =====================>>>
        Parameters: It takes two parameters namely as follows:
        =============>   The type of keys maintained by this map
        =============>   The type of mapped values


        NOTE 02 : =================>>  :
        HashMap implements Serializable, Cloneable, Map<K, V> interfaces.
        HashMap extends AbstractMap<K, V> class.
        The direct subclasses are LinkedHashMap, PrinterStateReasons.


=================================================================================================================================================

       NOTE 03 : ===================> :
       HashMap provides 4 constructors and the access modifier of each is public which are listed as follows:

        HashMap()
        HashMap(int initialCapacity)
        HashMap(int initialCapacity, float loadFactor)
        HashMap(Map map)

Constructor 1: HashMap()

It is the default constructor which creates an instance of HashMap with an initial capacity of 16 and load factor of 0.75.
syntax :
      HashMap<K, V> hm = new HashMap<K, V>();

Constructor 2: HashMap(int initialCapacity)
It creates a HashMap instance with a specified initial capacity and load factor of 0.75.
syntax :
    HashMap<K, V> hm = new HashMap<K, V>(int initialCapacity);

Constructor 3: HashMap(int initialCapacity, float loadFactor)
It creates a HashMap instance with a specified initial capacity and specified load factor
syntax :
    HashMap<K, V> hm = new HashMap<K, V>(int initialCapacity, int  loadFactor);


Constructor 4: HashMap(Map map): It creates an instance of HashMap with the same mappings as the specified map.
syntax :
    HashMap<K, V> hm = new HashMap<K, V>(Map map);
================================================================================================
various operation on hashMap

1) adding
            Adding Elements: In order to add an element to the map, we can use the put() method. However,
            the insertion order is not retained in the Hashmap. Internally, for every element, a separate hash is generated and
            the elements are indexed based on this hash to make it more efficient.
2) changing
             Adding Elements: In order to add an element to the map, we can use the put() method. However,
             the insertion order is not retained in the Hashmap. Internally, for every element, a separate hash is generated and
             the elements are indexed based on this hash to make it more efficient.
3) remove
            we can use the remove() method.

4) Traversal of HashMap
            We can use the Iterator interface to traverse over any structure of the Collection Framework.
            Since Iterators work with one type of data we use Entry<? , ?> to resolve the two separate types into
            a compatible format. Then using the next() method we print the entries of HashMap.

